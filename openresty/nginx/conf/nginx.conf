include includes/globals/*.conf;

worker_processes  1;
events {
    worker_connections  1024;
}

http {
    include includes/http/*.conf;
    include mime.types;
    default_type application/octet-stream;

    # Use the built-in Docker DNS resolver
    # resolver 127.0.0.11 ipv6=off;
    resolver 127.0.0.11 ipv6=off;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    # See https://github.com/openresty/headers-more-nginx-module#readme,
    # which is bundled with openresty https://openresty.org/en/components.html
    more_set_headers 'Server:';

    # Hide upstream proxy headers, if any
    proxy_hide_header X-Powered-By;

    # For websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/vnd.pgrst.object+json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    ##
    # SSL Settings, most of this is from https://ssl-config.mozilla.org/ and
    # some from https://gist.github.com/nrollr/9a39bb636a820fb97eec2ed85e473d38
    # and some from https://michael.lustfield.net/nginx/getting-a-perfect-ssl-labs-score
    ##

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;

    # RFC-7919 recommended: https://wiki.mozilla.org/Security/Server_Side_TLS#ffdhe4096
    ssl_dhparam /usr/local/openresty/nginx/conf/dhparam.pem;
    ssl_ecdh_curve secp521r1:secp384r1;

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    add_header X-Frame-Options DENY always;

    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    add_header X-Content-Type-Options nosniff always;

    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    add_header X-Xss-Protection "1; mode=block" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/${FQDN}/fullchain.pem;
    lua_ssl_trusted_certificate /etc/letsencrypt/live/${FQDN}/fullchain.pem;
    # lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;
    lua_ssl_verify_depth 0;

    ${NGINX_HTTP_DEV_INCLUDES}

    # Set up session store
    lua_shared_dict cas_store 1M;

    upstream certbot {
        server certbot;
    }

    # HTTP server
    server {
        listen 80 default_server;

        location /.well-known {
            proxy_pass http://certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        #expose external env vars as internal nginx variables
        listen 443 default_server ssl http2;

        server_name _;
        charset utf-8;
        uninitialized_variable_warn off;

        ssl_certificate /etc/letsencrypt/live/${FQDN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${FQDN}/privkey.pem;
        
        access_log logs/access.log combined;

        # Sessions with Redis. See
        # https://github.com/bungle/lua-resty-session
        set $session_storage redis;
        set $session_secret ${SESSION_SECRET};
        set $session_redis_host ${REDIS_HOST};
        set $session_redis_port ${REDIS_PORT};

        location /.well-known {
	        proxy_pass http://certbot;
        }
        
        include includes/http/server/*.conf;
        ${NGINX_SERVER_DEV_INCLUDES}
    }

}
