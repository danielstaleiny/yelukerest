
CREATE TABLE IF NOT EXISTS user_secret (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug TEXT NOT NULL
        CHECK (slug ~ '^[a-z0-9][a-z0-9_-]+[a-z0-9]$' AND char_length(slug) < 100),
    body TEXT NOT NULL,
    user_id INT REFERENCES "user"(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    team_nickname TEXT REFERENCES team(nickname)
        ON DELETE CASCADE
        ON UPDATE CASCADE
        CHECK (char_length(team_nickname) < 50),
    created_at TIMESTAMP WITH TIME ZONE
        NOT NULL
        DEFAULT current_timestamp,
    updated_at  TIMESTAMP WITH TIME ZONE
        NOT NULL
        DEFAULT current_timestamp,
    CONSTRAINT updated_after_created CHECK (updated_at >= created_at),
    CONSTRAINT user_or_team CHECK (
        ((team_nickname IS NOT NULL) AND (user_id IS NULL))
        OR
        ((team_nickname IS NULL) AND (user_id IS NOT NULL))
    )
);

-- Slug is unique per team and user
DROP INDEX IF EXISTS secret_unique_slug_user;
CREATE UNIQUE INDEX secret_unique_slug_user
    ON user_secret (user_id, slug)
    WHERE team_nickname IS NULL;
DROP INDEX IF EXISTS secret_unique_slug_team;
CREATE UNIQUE INDEX secret_unique_slug_team
    ON user_secret (team_nickname, slug)
    WHERE user_id IS NULL;

CREATE OR REPLACE FUNCTION fill_user_secret_defaults()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = current_timestamp;
    RETURN NEW;
END;
$$ language 'plpgsql';


DROP TRIGGER IF EXISTS tg_user_secret_default ON user_secret;
CREATE TRIGGER tg_user_secret_default
    BEFORE INSERT OR UPDATE
    ON user_secret
    FOR EACH ROW
EXECUTE PROCEDURE fill_user_secret_defaults();